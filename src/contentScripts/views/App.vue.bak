<script setup lang="ts">
import { computed, onMounted, onUnmounted, ref, watch } from 'vue'
import { countdownMinutes, timerMode, timerType } from '~/logic/storage'
import 'uno.css'

// 定义存储数据的类型
interface UrlTimeData {
  [key: string]: number | string
}

// 获取域名函数
function getDomainFromUrl(url: string): string {
  try {
    const urlObj = new URL(url)
    return urlObj.hostname
  }
  catch (error) {
    console.error('Error parsing URL:', error)
    return url
  }
}

// 记录当前页面URL和域名
const currentUrl = ref(window.location.href)
const currentDomain = ref(getDomainFromUrl(currentUrl.value))
const secondsElapsed = ref(0)
const isMoving = ref(false)
const isHovering = ref(false) // 新增：是否鼠标悬停
const isCountdownActive = ref(false) // 新增：是否激活倒计时模式
const timerPosition = ref({ y: 80 }) // 悬浮框默认距离顶部80px
const timerInterval = ref<number | null>(null)
const lastReportTime = ref(0) // 上次上报的时间
const currentTimerMode = ref(timerMode.value) // 当前计时器模式
const currentTimerType = ref(timerType.value) // 当前计时器类型
const currentCountdownMinutes = ref(countdownMinutes.value) // 倒计时分钟数
const totalCountdownSeconds = computed(() => currentCountdownMinutes.value * 60) // 倒计时总秒数
const remainingSeconds = ref(totalCountdownSeconds.value) // 剩余秒数

// 初始化倒计时
function initCountdown() {
  remainingSeconds.value = totalCountdownSeconds.value
}

// 监听倒计时设置变化
watch(currentCountdownMinutes, () => {
  if (currentTimerType.value === 'countdown') {
    initCountdown()
  }
})

// 计算显示的时间值和单位
const displayTime = computed(() => {
  if (currentTimerType.value === 'countup') {
    // 正计时模式
    const minutes = Math.floor(secondsElapsed.value / 60)
    const hours = Math.floor(minutes / 60)

    if (hours > 0) {
      return hours
    }
    else {
      return minutes
    }
  }
  else {
    // 倒计时模式
    const minutes = Math.floor(remainingSeconds.value / 60)
    const hours = Math.floor(minutes / 60)

    if (hours > 0) {
      return hours
    }
    else {
      return minutes
    }
  }
})

// 计算显示的单位
const displayUnit = computed(() => {
  if (currentTimerType.value === 'countup') {
    // 正计时模式
    const minutes = Math.floor(secondsElapsed.value / 60)
    const hours = Math.floor(minutes / 60)

    if (hours > 0) {
      return '小时'
    }
    else {
      return '分钟'
    }
  }
  else {
    // 倒计时模式
    const minutes = Math.floor(remainingSeconds.value / 60)
    const hours = Math.floor(minutes / 60)

    if (hours > 0) {
      return '小时'
    }
    else {
      return '分钟'
    }
  }
})

// 计算倒计时时间显示（时:分格式）
const countdownTimeDisplay = computed(() => {
  const totalMinutes = Math.floor(remainingSeconds.value / 60)
  const hours = Math.floor(totalMinutes / 60)
  const minutes = totalMinutes % 60
  const seconds = remainingSeconds.value % 60

  if (hours > 0) {
    return {
      hours: String(hours).padStart(2, '0'),
      minutes: String(minutes).padStart(2, '0'),
    }
  }
  else {
    return {
      minutes: String(minutes).padStart(2, '0'),
      seconds: String(seconds).padStart(2, '0'),
    }
  }
})

// 计算倒计时是否已结束
const isCountdownFinished = computed(() => {
  return currentTimerType.value === 'countdown' && remainingSeconds.value <= 0
})

// 计算定时器的颜色样式
const timerStyle = computed(() => {
  // 激活倒计时模式
  if (isCountdownActive.value) {
    return 'background: linear-gradient(135deg, #1f8ddc, #ba8ffa); border: 1px solid rgba(186, 143, 250, 1);'
  }
  // 倒计时结束
  else if (currentTimerType.value === 'countdown' && isCountdownFinished.value) {
    return 'background: linear-gradient(135deg, #4CAF50, #8BC34A); border: 1px solid rgba(76, 175, 80, 0.1);'
  }
  // 正计时模式
  else {
    return 'background: linear-gradient(135deg, #dc491f, #fab28f); border: 1px solid rgba(216, 59, 10, 0.1);'
  }
})

// 在倒计时完成时使用弹幕通知用户
function notifyCountdownFinished() {
  // 保存已完成的专注时间（分钟）
  const focusMinutes = Math.floor(totalCountdownSeconds.value / 60)

  // 创建弹幕元素
  const danmaku = document.createElement('div')
  danmaku.className = 'focus-timer-danmaku'
  danmaku.innerHTML = `
    <div class="danmaku-content">
      <span class="danmaku-icon"></span>
      <span class="danmaku-text">太棒啦，你成功完成了 ${focusMinutes} 分钟专注！</span>
    </div>
  `

  // 添加到页面
  document.body.appendChild(danmaku)

  // 设置动画结束后自动删除
  danmaku.addEventListener('animationend', () => {
    document.body.removeChild(danmaku)
  })

  // 同时创建一个CSS样式，确保样式被正确应用
  if (!document.getElementById('focus-timer-danmaku-style')) {
    const style = document.createElement('style')
    style.id = 'focus-timer-danmaku-style'
    style.textContent = `
      .focus-timer-danmaku {
        position: fixed;
        top: 20%;
        z-index: 10000;
        animation: focus-timer-slide 10s linear forwards;
        pointer-events: none;
        width: 100%;
      }
      
      .danmaku-content {
        display: flex;
        align-items: center;
        background: #ba8ffa;
        border: 1px solid #fdfbff;
        border-radius: 32px;
        padding: 4px 20px 4px 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
        width: fit-content;
      }
      
      .danmaku-icon {
        width: 24px;
        height: 24px;
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path fill="white" d="M16,30A14,14,0,1,1,30,16,14.0158,14.0158,0,0,1,16,30ZM16,4A12,12,0,1,0,28,16,12.0137,12.0137,0,0,0,16,4Z"/><polygon fill="white" points="20.59 22 15 16.41 15 7 17 7 17 15.58 22 20.59 20.59 22"/></svg>');
        background-repeat: no-repeat;
        background-position: center;
        margin-right: 8px;
      }
      
      .danmaku-text {
        color: white;
        font-family: 'PingFang SC', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        font-size: 16px;
        font-weight: 500;
        white-space: nowrap;
      }
      
      @keyframes focus-timer-slide {
        0% { transform: translateX(100vw); }
        100% { transform: translateX(-350px); }
      }
    `
    document.head.appendChild(style)
  }
}

// 上报访问时间数据到本地存储
async function reportTimeSpent() {
  const timeSpent = secondsElapsed.value - lastReportTime.value

  // 如果停留时间少于1秒，不记录
  if (timeSpent <= 0)
    return

  try {
    // 检查扩展上下文是否有效
    if (!browser.runtime || typeof browser.runtime.id === 'undefined') {
      console.error('Extension context is no longer valid')
      return
    }

    // 获取今天的日期作为key
    const today = new Date().toISOString().split('T')[0]

    // 从存储中获取今日数据
    const result = await browser.storage.local.get(today)
    const todayData = (result[today] || {}) as UrlTimeData

    // 更新当前域名的访问时间
    const currentTime = (todayData[currentDomain.value] as number) || 0
    todayData[currentDomain.value] = currentTime + timeSpent

    // 同时保存详细URL数据（用于排行榜展示更多信息）
    // todayData[`detail:${currentDomain.value}`] = currentUrl.value

    // 保存更新后的数据
    await browser.storage.local.set({ [today]: todayData })

    // 更新上次上报时间
    lastReportTime.value = secondsElapsed.value
  }
  catch (error) {
    console.error('Error saving time data:', error)
  }
}

// 加载页面上次访问时间
async function loadPreviousTime() {
  if (currentTimerMode.value === 'reset') {
    // 重新计时模式
    secondsElapsed.value = 0
    return
  }

  try {
    // 获取今天的日期
    const today = new Date().toISOString().split('T')[0]

    // 从存储中获取今日数据
    const result = await browser.storage.local.get(today)
    const todayData = (result[today] || {}) as UrlTimeData

    // 获取当前域名的累计时间
    if (todayData[currentDomain.value]) {
      secondsElapsed.value = todayData[currentDomain.value] as number
    }
    else {
      secondsElapsed.value = 0
    }

    // 更新上次上报时间
    lastReportTime.value = secondsElapsed.value
  }
  catch (error) {
    console.error('Error loading previous time:', error)
    secondsElapsed.value = 0
  }
}

// 鼠标拖动相关函数
function handleMouseDown(event: MouseEvent) {
  isMoving.value = true
  // 阻止默认行为和冒泡
  event.preventDefault()
  event.stopPropagation()
  document.addEventListener('mousemove', handleMouseMove, { passive: false })
  document.addEventListener('mouseup', handleMouseUp)
}

function handleMouseMove(event: MouseEvent) {
  if (isMoving.value) {
    // 阻止默认行为防止文本选择等
    event.preventDefault()
    const newY = event.clientY
    // 限制在视窗范围内
    if (newY >= 0 && newY <= window.innerHeight - 34) {
      timerPosition.value.y = newY
    }
  }
}

function handleMouseUp() {
  isMoving.value = false
  document.removeEventListener('mousemove', handleMouseMove)
  document.removeEventListener('mouseup', handleMouseUp)
}

// 鼠标悬停处理
function handleMouseEnter() {
  isHovering.value = true
}

function handleMouseLeave() {
  isHovering.value = false
}

// 开始倒计时
function startCountdown() {
  isCountdownActive.value = true
  currentTimerType.value = 'countdown'

  // 确保使用最新的设置
  browser.storage.local.get('countdown-minutes').then((result) => {
    if (result['countdown-minutes']) {
      currentCountdownMinutes.value = Number(result['countdown-minutes'])
    }
    // 初始化倒计时
    initCountdown()

    // 重新开始计时
    stopTimer()
    startTimer()
  })
}

// 停止倒计时
function stopCountdown() {
  isCountdownActive.value = false
  currentTimerType.value = 'countup'

  // 重新加载之前的时间
  loadPreviousTime()

  // 重新开始计时
  stopTimer()
  startTimer()
}

// 开始计时函数
function startTimer() {
  if (timerInterval.value === null) {
    timerInterval.value = window.setInterval(() => {
      // 无论什么计时类型，秒数始终正常累加，这样可以保证时间统计的准确性
      secondsElapsed.value++

      // 对于倒计时模式，单独处理倒计时逻辑
      if (currentTimerType.value === 'countdown') {
        if (remainingSeconds.value > 0) {
          remainingSeconds.value--
        }
        else if (remainingSeconds.value === 0) {
          // 倒计时结束通知
          notifyCountdownFinished()
          // 倒计时结束后自动切换回正计时模式
          if (isCountdownActive.value) {
            stopCountdown()
          }
        }
      }
    }, 1000)
  }
}

// 停止计时函数
function stopTimer() {
  if (timerInterval.value !== null) {
    clearInterval(timerInterval.value)
    timerInterval.value = null
  }
}

// 切换计时器类型 (未使用，保留以备将来使用)
function _toggleTimerType() {
  if (currentTimerType.value === 'countup') {
    currentTimerType.value = 'countdown'
    initCountdown()
  }
  else {
    currentTimerType.value = 'countup'
    loadPreviousTime()
  }

  // 重新开始计时
  stopTimer()
  startTimer()
}

// 重置倒计时 (未使用，保留以备将来使用)
function _resetCountdown() {
  if (currentTimerType.value === 'countdown') {
    remainingSeconds.value = totalCountdownSeconds.value
  }
}

// 监听计时器模式变化
browser.storage.onChanged.addListener((changes) => {
  // 监听计时器模式
  if (changes['timer-mode']) {
    currentTimerMode.value = changes['timer-mode'].newValue as string
    // 这里不再需要判断计时器类型，因为无论是什么类型，都需要处理计时模式变化
    // 如果模式改变为重新计时，则重置计时器
    if (currentTimerMode.value === 'reset') {
      secondsElapsed.value = 0
      lastReportTime.value = 0
    }
    else {
      // 如果改变为累积计时，则加载之前的时间
      loadPreviousTime()
    }
  }

  // 监听计时器类型
  if (changes['timer-type']) {
    currentTimerType.value = changes['timer-type'].newValue as string

    if (currentTimerType.value === 'countdown') {
      // 切换到倒计时模式，初始化倒计时
      initCountdown()
    }
    // 切换计时器类型不影响正常的秒数计数，所以不需要重新加载

    // 重新开始计时
    stopTimer()
    startTimer()
  }

  // 监听倒计时时间
  if (changes['countdown-minutes']) {
    currentCountdownMinutes.value = changes['countdown-minutes'].newValue as number
    // 如果在倒计时模式下，重置倒计时
    if (currentTimerType.value === 'countdown') {
      initCountdown()
    }
  }
})

// 页面载入时开始计时
onMounted(async () => {
  // 初始化计时器
  if (currentTimerType.value === 'countup') {
    // 正计时模式，加载之前的时间
    await loadPreviousTime()
  }
  else {
    // 倒计时模式，初始化倒计时
    initCountdown()
  }

  startTimer()

  // 页面卸载或标签页不可见时上报并暂停计时
  window.addEventListener('visibilitychange', async () => {
    if (document.visibilityState === 'visible') {
      // 页面变为可见时，重新开始计时
      startTimer()
    }
    else {
      // 页面变为不可见时，上报并暂停计时
      // 检查扩展上下文是否有效
      if (browser.runtime && typeof browser.runtime.id !== 'undefined') {
        await reportTimeSpent()
      }
      stopTimer()
    }
  })

  // 页面卸载时上报并清理定时器
  window.addEventListener('beforeunload', async () => {
    // 检查扩展上下文是否有效
    if (browser.runtime && typeof browser.runtime.id !== 'undefined') {
      await reportTimeSpent()
    }
    stopTimer()
  })

  // 每隔30秒上报一次数据，以防异常关闭
  const reportInterval = setInterval(async () => {
    // 检查扩展上下文是否有效
    if (browser.runtime && typeof browser.runtime.id !== 'undefined') {
      await reportTimeSpent()
    }
  }, 30000)

  // 组件卸载时清理
  onUnmounted(() => {
    clearInterval(reportInterval)
    stopTimer()
  })
})
</script>

<template>
  <div
    class="fixed right-0 z-100 font-sans select-none"
    :class="[isHovering || isCountdownActive ? 'opacity-100' : 'opacity-50 hover:opacity-100']"
    :style="{ top: `${timerPosition.y}px` }"
    @mouseenter="handleMouseEnter"
    @mouseleave="handleMouseLeave"
  >
    <div class="flex flex-col items-end">
      <!-- 计时器显示 -->
      <div
        class="flex items-center rounded-l-[32px] shadow px-2 py-1 cursor-move relative"
        :style="timerStyle"
        :class="[isCountdownActive ? 'w-24' : '']"
        @mousedown="handleMouseDown"
      >
        <!-- 正常模式或Hover模式 -->
        <template v-if="!isCountdownActive">
          <span class="text-white font-medium text-base mr-1">{{ displayTime }}</span>
          <span class="text-[#ffffff80] text-xs">{{ displayUnit }}</span>
        </template>

        <!-- 倒计时激活模式 -->
        <template v-else>
          <span class="i-carbon-timer text-white text-sm mr-2" />
          <div class="flex text-white font-medium text-base">
            <span>{{ countdownTimeDisplay.hours || countdownTimeDisplay.minutes }}</span>
            <span class="mx-1">:</span>
            <span>{{ countdownTimeDisplay.hours ? countdownTimeDisplay.minutes : countdownTimeDisplay.seconds }}</span>
          </div>
        </template>
      </div>

      <!-- 工具栏 -->
      <div v-if="isHovering || isCountdownActive" class="flex mt-1 space-x-1">
        <!-- 倒计时按钮 (仅在Hover状态且不在倒计时模式下显示) -->
        <button
          v-if="isHovering && !isCountdownActive"
          class="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center border-0 outline-none cursor-pointer"
          title="开始倒计时"
          @click="startCountdown"
        >
          <span class="i-carbon-timer text-gray-700" />
        </button>

        <!-- 停止倒计时按钮 (仅在倒计时激活模式且鼠标悬停时显示) -->
        <button
          v-if="isCountdownActive && isHovering"
          class="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center border-0 outline-none cursor-pointer"
          title="停止倒计时"
          @click="stopCountdown"
        >
          <span class="i-heroicons:x-mark-20-solid text-gray-700" />
        </button>
      </div>
    </div>
  </div>
</template>
